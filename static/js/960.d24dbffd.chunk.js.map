{"version":3,"file":"static/js/960.d24dbffd.chunk.js","mappings":"+UAkBIA,EAASC,EAAAA,KAAaC,MAAM,CAC9BC,MAAOF,EAAAA,KAAaE,QAAQC,SAAS,uBACrCC,SAAUJ,EAAAA,KAEPG,SAAS,yBACTE,IAAI,EAAG,sDACPC,QAAQ,WAAY,8CAGlB,SAASC,IACd,IAAMC,GAAWC,EAAAA,EAAAA,MAEXC,EAAgB,mCAAG,WAAOC,EAAP,mFAAiBC,EAAjB,EAAiBA,UAAjB,SACCJ,GAASK,EAAAA,EAAAA,IAAMF,IADhB,qBACfG,MADe,uBAGrBF,IACAG,IAAAA,OAAAA,QAAwB,qBAJH,0BAOvBA,IAAAA,OAAAA,QAAA,gDAPuB,4CAAH,wDAUtB,OACE,SAAC,KAAD,CAAMC,GAAG,UAAUC,QAAQ,SAASC,EAAE,QAAQC,MAAM,UAApD,UACE,SAAC,KAAD,CAAKH,GAAG,QAAQI,EAAG,EAAGC,QAAQ,KAAKC,EAAE,QAAQJ,EAAE,QAAQK,GAAG,OAA1D,UACE,SAAC,KAAD,CACEC,cAAe,CACbtB,MAAO,GACPE,SAAU,IAEZqB,iBAAkB1B,EAClB2B,SAAUhB,EANZ,SAQG,gBAAGiB,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQC,EAAzB,EAAyBA,QAAzB,OACC,iBAAMH,SAAUC,EAAhB,UACE,UAAC,KAAD,CAAQG,QAAS,EAAGC,MAAM,aAA1B,WACE,UAAC,KAAD,CACEC,YAAU,EACVC,YAAaL,EAAO1B,OAAS2B,EAAQ3B,MAFvC,WAIE,SAAC,KAAD,CAAWgC,QAAQ,QAAnB,oBACA,SAAC,KAAD,CACEC,GAAIC,EAAAA,GACJC,GAAG,QACHC,KAAK,QACLC,KAAK,QACLC,QAAQ,SACRC,YAAY,oBAGhB,UAAC,KAAD,CACET,YAAU,EACVC,YAAaL,EAAOxB,UAAYyB,EAAQzB,SAF1C,WAIE,SAAC,KAAD,CAAW8B,QAAQ,WAAnB,uBACA,SAAC,KAAD,CACEC,GAAIC,EAAAA,GACJC,GAAG,WACHC,KAAK,WACLC,KAAK,WACLE,YAAY,iBACZD,QAAQ,YAEV,SAAC,KAAD,UAAmBZ,EAAOxB,eAG5B,SAAC,KAAD,CAAQmC,KAAK,SAASG,YAAY,WAAWC,MAAM,OAAnD,wBAjCL,OA2CV,CC3Fc,SAASC,IACtB,OACE,iCACE,SAACC,EAAA,EAAD,WACE,wCAEF,SAACtC,EAAD,MAGL,C","sources":["components/LoginForm/LoginForm.js","pages/Login.js"],"sourcesContent":["import { Field, Formik } from 'formik';\nimport * as yup from 'yup';\nimport {\n  Box,\n  Button,\n  Flex,\n  FormControl,\n  FormLabel,\n  FormErrorMessage,\n  Input,\n  VStack,\n} from '@chakra-ui/react';\n\nimport Notiflix from 'notiflix';\n\nimport { useDispatch } from 'react-redux';\nimport { logIn } from 'redux/auth/operations';\n\nlet schema = yup.object().shape({\n  email: yup.string().email().required('Please, enter email'),\n  password: yup\n    .string()\n    .required('No password provided.')\n    .min(6, 'Password is too short - should be 6 chars minimum.')\n    .matches(/[a-zA-Z]/, 'Password can only contain Latin letters.'),\n});\n\nexport function LoginForm() {\n  const dispatch = useDispatch();\n\n  const handleFormSubmit = async (values, { resetForm }) => {\n    const { error } = await dispatch(logIn(values));\n    if (!error) {\n      resetForm();\n      Notiflix.Notify.success('You are logged in');\n      return;\n    }\n    Notiflix.Notify.failure(`Something went wrong, please check your data`);\n  };\n\n  return (\n    <Flex bg=\"#cedaf2\" justify=\"center\" h=\"100vh\" color=\"#0e0f69\">\n      <Box bg=\"white\" p={6} rounded=\"md\" w=\"300px\" h=\"270px\" mt=\"20px\">\n        <Formik\n          initialValues={{\n            email: '',\n            password: '',\n          }}\n          validationSchema={schema}\n          onSubmit={handleFormSubmit}\n        >\n          {({ handleSubmit, errors, touched }) => (\n            <form onSubmit={handleSubmit}>\n              <VStack spacing={4} align=\"flex-start\">\n                <FormControl\n                  isRequired\n                  isInvalid={!!errors.email && touched.email}\n                >\n                  <FormLabel htmlFor=\"email\">Email</FormLabel>\n                  <Field\n                    as={Input}\n                    id=\"email\"\n                    name=\"email\"\n                    type=\"email\"\n                    variant=\"filled\"\n                    placeholder=\"Enter email\"\n                  />\n                </FormControl>\n                <FormControl\n                  isRequired\n                  isInvalid={!!errors.password && touched.password}\n                >\n                  <FormLabel htmlFor=\"password\">Password</FormLabel>\n                  <Field\n                    as={Input}\n                    id=\"password\"\n                    name=\"password\"\n                    type=\"password\"\n                    placeholder=\"Enter password\"\n                    variant=\"filled\"\n                  />\n                  <FormErrorMessage>{errors.password}</FormErrorMessage>\n                </FormControl>\n\n                <Button type=\"submit\" colorScheme=\"telegram\" width=\"full\">\n                  Log In\n                </Button>\n              </VStack>\n            </form>\n          )}\n        </Formik>\n      </Box>\n    </Flex>\n  );\n}\n","import { Helmet } from 'react-helmet';\nimport { LoginForm } from 'components/LoginForm/LoginForm';\n\nexport default function Login() {\n  return (\n    <>\n      <Helmet>\n        <title>Login</title>\n      </Helmet>\n      <LoginForm />\n    </>\n  );\n}\n"],"names":["schema","yup","shape","email","required","password","min","matches","LoginForm","dispatch","useDispatch","handleFormSubmit","values","resetForm","logIn","error","Notiflix","bg","justify","h","color","p","rounded","w","mt","initialValues","validationSchema","onSubmit","handleSubmit","errors","touched","spacing","align","isRequired","isInvalid","htmlFor","as","Input","id","name","type","variant","placeholder","colorScheme","width","Login","Helmet"],"sourceRoot":""}